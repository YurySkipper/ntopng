cmake_minimum_required(VERSION 3.12 FATAL_ERROR)
file(STRINGS "VERSION" VERSION_STRING)
project(ntopng VERSION "${VERSION_STRING}" LANGUAGES CXX C)
set(CMAKE_BUILD_TYPE_INIT Release)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(NTOP_CMAKE_BUILD TRUE)

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug)
endif()
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)

find_package(Threads REQUIRED)
find_package(OpenSSL REQUIRED)  
find_package(ZeroMQ REQUIRED)
find_package(PCAP REQUIRED)
find_package(Ndpi REQUIRED)

include_directories(include ${OPENSSL_INCLUDE_DIR} ${ZeroMQ_INCLUDE_DIRS} ${PCAP_INCLUDE_DIR})

file(GLOB_RECURSE INCLUDE_FILES ${CMAKE_SOURCE_DIR}/include/*.h)
file(GLOB_RECURSE SOURCE_FILES_NO_MAIN ${CMAKE_SOURCE_DIR}/src/*.cpp)
# for using catch we don't need the main
list(FILTER SOURCE_FILES_NO_MAIN EXCLUDE REGEX ".*main.cpp$")
#include(${CMAKE_SOURCE_DIR}/cmake/unit_test.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/clang_tools.cmake)
#include(${CMAKE_SOURCE_DIR}/cmake/cppcheck.cmake)

#if(CMAKE_BUILD_TYPE MATCHES "^[Rr]elease")
#include(${CMAKE_SOURCE_DIR}/cmake/doxygen.cmake)
#endif()
add_executable(ntopng ${SOURCE_FILES_NO_MAIN} ${CMAKE_SOURCE_DIR}/src/main.cpp)
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  # using Clang
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -lc++abi")
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_options(ntopng PRIVATE -Wall -Wextra -Werror -stdlib=libc++ -fsanitize=address -fprofile-arcs -ftest-coverage -fno-omit-frame-pointer -v)
  else()
    target_compile_options(ntopng PRIVATE -Wall -Wextra -Werror -stdlib=libc++ -v)
  endif()
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  # using GCC
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  target_compile_options(ntopng PRIVATE -Wall -Wextra -Werror -O0 -ggdb -fprofile-arcs -ftest-coverage)
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -lgcov -coverage")
  else()
  target_compile_options(ntopng PRIVATE -Wall -Wextra -Werror)
  endif()
endif()
target_compile_definitions(ntopng PRIVATE NTOP_CMAKE_BUILD=${NTOP_CMAKE_BUILD})
target_link_libraries(ntopng PRIVATE ${OPENSSL_LIBRARIES} ${ZeroMQ_LIBRARIES} ${PCAP_LIBRARY} Threads::Threads)