  <div class="row">
    <div class="col-md-12 col-lg-12">
      <div class="alert alert-danger d-none" id='alert-row-buttons' role="alert">
      </div>
      <div class="card">
        {% if isEmptyString(script_list.search_filter) then %}
        <div class="card-header">
          <ul class="nav nav-tabs card-header-tabs">
            <li class="nav-item">
              <a id="all-scripts" class="nav-link filter-scripts-button" href="#all">{{ i18n("all") }}</a>
            </li>
            <li class="nav-item">
              <a id="enabled-scripts" class="nav-link filter-scripts-button" href="#enabled">{{ i18n("enabled") }}</a>
            </li>
            <li class="nav-item">
              <a id ="disabled-scripts" class="nav-link filter-scripts-button" href="#disabled">{{ i18n("disabled") }}</a>
            </li>
          </ul>
        </div>
        {% end %}
        <div class="card-body">
          <table id="scripts-config" class="table w-100 table-striped table-hover table-bordered mt-3">
            <thead>
              <tr>
              <th></th>
	            <th>{{ i18n("name", {}) }}</th>
              <th>{{ i18n("interface", {}) }}</th>
              <th>{{ i18n("category", {}) }}</th>
              <th>{{ i18n("description", {}) }}</th>
              <th>{{ i18n("values", {}) }}</th>
              <th>{{ i18n("action", {})}}</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
        {% if isEmptyString(script_list.search_filter) then %}
        <div class="card-footer">

	  <button id='btn-disable-all' disabled class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#disable-all-modal">
            <i class='fas fa-toggle-off'></i> {{ i18n("checks.disable_all") }}</button>

  	  {% if script_list.check_subdir == "all" then %}
	  <button id='btn-factory-reset' class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#factory-reset-modal">
            <i class='fas fa-undo-alt'></i> {{ i18n("factory_reset") }}</button>
	  {% end %}
	</div>
        {% end %}
      </div>
    </div>
  </div>
  <div class='notes bg-light border'>
    <b>{{ i18n('notes') }}</b>
    <ul>
      <li> {{ i18n('checks.categories') }}
        <ul>
          {% for _, cat in pairsByKeys(check_categories) do %}
          <li> {* string.format("<i class='fa %s'></i> %s: %s", cat.icon, i18n(cat.i18n_title, {product=info.product}),
            i18n(cat.i18n_descr, {product=info.product})) *} </li>
          {% end %}
        </ul>
      </li>
      <li> {{ i18n('interface') }}
        <ul>
	  <li> {* string.format("<i class='fa fa-ethernet'></i>: %s", i18n("scripts_list.note_packet_interface")) *} </li>
	  <li> {* string.format("<i class='fa fa-bezier-curve'></i>: %s", i18n("scripts_list.note_zmq_interface")) *} </li>
	</ul>
      </li>
    </ul>
  </div>

{*
  script_list.template_utils.gen("modal_confirm_dialog.html", {
      dialog={
          id = "disable-all-modal",
          message = i18n('checks.disable_all_message'),
          title = i18n('checks.disable_all_checks'),
          confirm = i18n("checks.disable_all"),
          custom_alert_class = 'alert alert-danger',
          confirm_button = 'btn-danger',
      },
  })
*}

{*
  script_list.template_utils.gen("modal_confirm_dialog.html", {
      dialog={
          id = "factory-reset-modal",
          message = i18n('checks.factory_reset_all_message'),
          title = i18n('checks.factory_reset_all_checks'),
          confirm = i18n("factory_reset"),
          custom_alert_class = 'alert alert-danger',
          confirm_button = 'btn-danger',
      },
  })
*}


{# include modals for edit_configset.lua #}
{* script_list.template_utils.gen("pages/modals/edit_configset/edit_config_modal.html", {
  subdir = script_list.check_subdir,
}) *}
{# add css, js files #}
<link href="{{ ntop.getHttpPrefix() }}/css/dataTables.bootstrap5.min.css" rel="stylesheet"/>
<script type="text/javascript">

const check_subdir = "{{ script_list.check_subdir }}";

const scripts_categories = [
  {
    label: "{{ i18n('scripts_list.all') }}",
    disableFilter: true
  },
  {% for _, cat in pairsByKeys(check_categories) do %}
    {
      label: "{{ i18n(cat.i18n_title) }}",
      disableFilter: false
    },
  {% end %}
];

let pageCsrf = "{{ ntop.getRandomCSRFValue() }}";
const script_search_filter = "{{ script_list.search_filter }}";
let script_key_filter = "{{ script_list.script_filter }}";
let page_url = "{* script_list.page_url *}";
let apps_and_categories = {* script_list.apps_and_categories *};
let device_types = {* script_list.device_types *};

i18n_ext.all = '{{ i18n("all", {}) }}';
i18n_ext.enabled = '{{ i18n("enabled", {}) }}';
i18n_ext.disabled = '{{ i18n("disabled", {}) }}';
i18n_ext.request_failed_message = '{{ i18n("request_failed_message") }}';
i18n_ext.select_operator = "{{ i18n('scripts_list.select_operator') }}";
i18n_ext.empty_input_box = "{{ i18n('config_scripts.empty_value_message') }}";
i18n_ext.template_not_found = "{{ i18n('scripts_list.template_not_found') }}";
i18n_ext.view = "{{ i18n('scripts_list.actions.view') }}";
i18n_ext.view_src_script = "{{ i18n('scripts_list.actions.view_src_script') }}";
i18n_ext.edit = "{{ i18n('scripts_list.actions.edit') }}";
i18n_ext.edit_script = "{{ i18n('scripts_list.actions.edit_script') }}";
i18n_ext.items_list_comma = "{{ i18n('scripts_list.items_list_comma') }}";
i18n_ext.blacklisted_country = "{{ i18n('scripts_list.blacklisted_country') }}";
i18n_ext.expired_csrf = "{{ i18n('expired_csrf') }}";
i18n_ext.filter_categories = "{{ i18n('scripts_list.filter_dropdown') }}";
i18n_ext.showing_x_to_y_rows = "{{ i18n('showing_x_to_y_rows', {x='_START_', y='_END_', tot='_TOTAL_'}) }}";
i18n_ext.script_search = "{{ i18n('scripts_list.script_search') }}";
i18n_ext.enable_check_title = "{{ i18n("enable_check_title")}}";
i18n_ext.disable_check_title = "{{ i18n("disable_check_title")}}";
i18n_ext.edit_check_title = "{{ i18n("edit_check_title")}}";
i18n_ext.scripts_list = {};
i18n_ext.scripts_list.templates = {};
i18n_ext.scripts_list.templates.excluded_applications = "{{ i18n('scripts_list.templates.excluded_applications') }}";
i18n_ext.scripts_list.templates.flow_duration_threshold = "{{ i18n('scripts_list.templates.flow_duration_threshold') }}";
i18n_ext.scripts_list.templates.elephant_flows_l2r = "{{ i18n('scripts_list.templates.elephant_flows_l2r') }}";
i18n_ext.scripts_list.templates.elephant_flows_r2l = "{{ i18n('scripts_list.templates.elephant_flows_r2l') }}";
i18n_ext.scripts_list.templates.template_not_implemented = "{{ i18n('scripts_list.templates.template_not_implemented') }}";
i18n_ext.scripts_list.templates.blacklisted_country_list = "{{ i18n('scripts_list.templates.blacklisted_country_list') }}";
i18n_ext.scripts_list.exclusion_list_title = "{{ i18n('scripts_list.exclusion_list_title') }}";

i18n_ext.enable = "{{ i18n('show_alerts.enable_alerts') }}";
i18n_ext.disable = "{{ i18n('show_alerts.disable_alerts') }}";

i18n_ext.metrics = {};
i18n_ext.metrics.minutes = "{{ i18n('metrics.minutes') }}";
i18n_ext.metrics.hours = "{{ i18n('metrics.hours') }}";
i18n_ext.metrics.days = "{{ i18n('metrics.days') }}";

i18n_ext.values = "{{ i18n('values', {}) }}";
i18n_ext.rest = {* json.encode(i18n('rest_consts')) *};

</script>
<script type="text/javascript" src="{{ ntop.getHttpPrefix() }}/js/config_callbacks/scripts-list-utils.js?{{ ntop.getStartupEpoch() }}"></script>

